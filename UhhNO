
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, orientation:landscape">
    <title>UNO Game</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background: url('C:\Users\ADZ\Desktop\Uhhno\background1.jpg') no-repeat center center fixed;
            background-size: cover;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
        }
        .game-area {
            display: none;
            width: 100%;
            height: 90vh;
            text-align: center;
        }
        .discard-pile {
            padding: 15px;
            border-radius: 10px;
            font-size: 22px;
            font-weight: bold;
            color: black;
            display: inline-block;
            margin: 15px;
            min-width: 80px;
            min-height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .player-hand, .ai-hand {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }
        .card {
            width: 60px;
            height: 100px;
            font-size: 20px;
            font-weight: bold;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover {
            transform: scale(1.1);
            box-shadow: 4px 4px 15px rgba(0, 0, 0, 0.4);
        }
        .btn {
            padding: 10px 20px;
            font-size: 18px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }
        .btn:hover {
            background-color: #0056b3;
        }
        .card-back {
            background-color: gray;
        }
        #winner-modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            border-radius: 10px;
            text-align: center;
        }
        #turn-indicator {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
            color: #ff5722;
        }
        /* New styles for the popup */
        #mechanics-modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        #mechanics-modal .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 10px;
            text-align: left;
            position: relative;
        }
        #mechanics-modal .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            cursor: pointer;
            color: #888;
        }
        #mechanics-modal .close-button:hover {
            color: #333;
        }
        #mechanics-modal h2 {
            margin-bottom: 20px;
            text-align: center;
        }
        #mechanics-modal ul {
            list-style-type: disc;
            padding-left: 20px;
            margin-bottom: 20px;
        }
        #mechanics-modal li {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container" id="welcome-screen">
        <h1>Welcome to UNO Game</h1>
        <p>Click the button below to start the game!</p>
        <button class="btn" onclick="startGame()">Start Game</button>
        <button class="btn" id="view-mechanics">View Game Mechanics</button> </div>

    <div class="game-area" id="game-area">
        <h2>UNO Game</h2>
        <div style="position: absolute; left: 250px; top: 50%; transform: translateY(-50%);">
            <h3>Theme Card</h3>
            <div id="discard-pile" class="discard-pile"></div>
        </div>
        <h3 id="turn-indicator">Your Turn</h3>
        <div id="discard-pile" class="discard-pile"></div>
        <h3>AI's Hand</h3>
        <button class="btn" style="position: absolute; top: 50%; right: 450px; transform: translateY(-50%);" onclick="drawCard('player')">Draw Card</button>
        <div id="ai-hand" class="ai-hand"></div>
        <br>
        <br>
        <h3>Your Hand</h3>
        <div id="player-hand" class="player-hand"></div>
        <h3 id="winner-message"></h3>
    </div>

    <div id="winner-modal" class="modal">
        <div class="modal-content">
            <h2 id="modal-title"></h2>
            <p id="modal-text"></p>
            <button class="btn" onclick="resetGame()">Play Again</button>
        </div>
    </div>

    <div id="mechanics-modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>How to Play UNO</h2>
            <ul>
                <li><strong>Objective:</strong> Be the first player to get rid of all your cards.</li>
                <li><strong>Setup:</strong>
                    <ul>
                        <li>Each player starts with 10 cards.</li>
                        <li>The remaining cards form the draw pile.</li>
                        <li>The top card of the draw pile is placed face-up to start the discard pile.</li>
                    </ul>
                </li>
                <li><strong>Playing:</strong>
                    <ul>
                        <li>Players take turns matching the top card of the discard pile by color, number, or symbol.</li>
                        <li>If a player cannot play a card, they must draw a card from the draw pile.</li>
                        <li>Wild cards can be played on any color or number.  The player who plays the wild card chooses the new color.</li>
                    </ul>
                </li>
                <li><strong>Card Types:</strong>
                    <ul>
                         <li><strong>Number Cards (0-9):</strong> Match the color or number.</li>
                         <li><strong>Reverse:</strong> Changes the direction of play.</li>
                         <li><strong>Skip:</strong> Skips the next player's turn.</li>
                         <li><strong>Draw Two (+3):</strong> Forces the next player to draw two cards and lose their turn.</li>
                         <li><strong>Wild:</strong> Can be played on any card. The player chooses the color.</li>
                         <li><strong>Wild Draw Four (+5):</strong> Can be played on any card. The player chooses the color. The next player draws four cards and loses their turn.</li>
                    </ul>
                </li>
                <li><strong>Winning:</strong> The first player to play their last card wins the game.</li>
            </ul>
        </div>
    </div>

    <audio id="shuffle-sound" src="shuffle.mp3"></audio>
    <audio id="play-sound" src="play.mp3"></audio>
    <audio id="action-sound" src="action.mp3"></audio>

    <script>
        let playerHand = [];
        let aiHand = [];
        let discardPile = [];
        let playerTurn = true;

        // Define and initialize the deck
        let deck = [
            ...Array.from({ length: 10 }, (_, i) => ({ color: 'red', number: i })),
            ...Array.from({ length: 10 }, (_, i) => ({ color: 'blue', number: i })),
            ...Array.from({ length: 10 }, (_, i) => ({ color: 'green', number: i })),
            ...Array.from({ length: 10 }, (_, i) => ({ color: 'yellow', number: i })),
            ...Array(2).fill({ color: 'red', type: 'reverse' }),
            ...Array(2).fill({ color: 'red', type: 'skip' }),
            ...Array(2).fill({ color: 'red', type: '+2', action: (target) => {
                drawCard(target);
                drawCard(target);
            }}),
            ...Array(2).fill({ color: 'blue', type: 'reverse' }),
            ...Array(2).fill({ color: 'blue', type: 'skip' }),
            ...Array(2).fill({ color: 'blue', type: '+2', action: (target) => {
                drawCard(target);
                drawCard(target);
            }}),
            ...Array(2).fill({ color: 'green', type: 'reverse' }),
            ...Array(2).fill({ color: 'green', type: 'skip' }),
            ...Array(2).fill({ color: 'green', type: '+2', action: (target) => {
                drawCard(target);
                drawCard(target);
            }}),
            ...Array(2).fill({ color: 'yellow', type: 'reverse' }),
            ...Array(2).fill({ color: 'yellow', type: 'skip' }),
            ...Array(2).fill({ color: 'yellow', type: '+2', action: (target) => {
                drawCard(target);
                drawCard(target);
            }}),
            ...Array(4).fill({ type: 'wild' }),
            ...Array(4).fill({ type: 'wild+4', action: (target) => {
                drawCard(target);
                drawCard(target);
                drawCard(target);
                drawCard(target);
            }})
        ];
        let gameStarted = false;
        const initialHandSize = 10;
        const remainingDeck = deck.slice(initialHandSize * 2); // Remaining cards after dealing initial hands

        function updateDeckIndicator() {
            const deckIndicator = document.getElementById("deck-indicator");
            deckIndicator.textContent = `Cards Remaining in Deck: ${deck.length}`;
        }

        function playSound(soundId) {
            const sound = document.getElementById(soundId);
            sound.currentTime = 0;
            sound.play();
        }

        function startGame() {
            if (!gameStarted) {
                playSound('shuffle-sound');
                document.getElementById("welcome-screen").style.display = "none";
                document.getElementById("game-area").style.display = "block";
                dealCards("player");
                dealCards("ai");
                discardPile.push(deck[Math.floor(Math.random() * deck.length)]);
                updateDiscardPile();
                gameStarted = true;
                playerTurn = true;
                document.getElementById("winner-message").textContent = "";
                updateTurnIndicator();
            }
        }

        function dealCards(player) {
            for (let i = 0; i < 10; i++) {
                drawCard(player);
            }
        }

        function drawCard(player) {
            if (deck.length === 0) return;
            const randomIndex = Math.floor(Math.random() * deck.length);
            const card = deck[randomIndex];
            let hand = player === "player" ? playerHand : aiHand;
            hand.push(card);
            updateHand(player);
        }

        function updateHand(player) {
            let handDiv = document.getElementById(player + "-hand");
            handDiv.innerHTML = "";
            let hand = player === "player" ? playerHand : aiHand;
            hand.forEach(card => {
                const cardElement = document.createElement("div");
                cardElement.className = "card";
                if (player === "player") {
                    cardElement.style.backgroundColor = card.color;
                    cardElement.textContent = card.number;
                    if (playerTurn) {
                        cardElement.onclick = () => playCard(card);
                    }
                } else {
                    cardElement.classList.add("card-back");
                }
                handDiv.appendChild(cardElement);
            });
        }

        function updateDiscardPile() {
            let lastCard = discardPile[discardPile.length - 1];
            const discardPileElement = document.getElementById("discard-pile");
            if (lastCard.number !== undefined) {
                discardPileElement.textContent = lastCard.number;
            } else if (lastCard.type) {
                discardPileElement.textContent = lastCard.type;
            } else {
                discardPileElement.textContent = ""; // Fallback for unexpected cases
            }
            discardPileElement.style.backgroundColor = lastCard.color || "gray";
        }

        function playCard(card) {
            if (!playerTurn) return;
            let lastCard = discardPile[discardPile.length - 1];
            if (card.color === lastCard.color || card.number === lastCard.number || card.type === lastCard.type || card.type === 'wild' || card.type === 'wild+4') {
                playSound('play-sound');
                discardPile.push(card);
                playerHand = playerHand.filter(c => c !== card);
                updateHand("player");
                updateDiscardPile();
                checkWin();

                if (card.type === 'reverse') {
                    // Reverse the turn order
                    playerTurn = !playerTurn;
                    updateTurnIndicator();
                    setTimeout(aiTurn, 1000); // Call AI's turn after reversing
                } else if (card.type === 'skip') {
                    // Skip the opponent's turn
                    playerTurn = false; // Corrected: It should be the AI's turn next
                    updateTurnIndicator();
                    setTimeout(aiTurn, 1000);
                } else if (card.type === '+2') {
                    // Force opponent to draw 2 cards
                    drawCard(playerTurn ? "ai" : "player");
                    drawCard(playerTurn ? "ai" : "player");
                    playerTurn = !playerTurn;
                    updateTurnIndicator();
                    setTimeout(aiTurn, 1000);
                } else if (card.type === 'wild') {
                    // Allow player to choose a color
                    const chosenColor = prompt("Choose a color: red, blue, green, yellow");
                    card.color = chosenColor;
                    playerTurn = false; // Switch turn after wild card is played
                    updateTurnIndicator();
                    setTimeout(aiTurn, 1000);

                } else if (card.type === 'wild+4') {
                    // Allow player to choose a color and force opponent to draw 4 cards
                    const chosenColor = prompt("Choose a color: red, blue, green, yellow");
                    card.color = chosenColor;
                    drawCard(playerTurn ? "ai" : "player");
                    drawCard(playerTurn ? "ai" : "player");
                    drawCard(playerTurn ? "ai" : "player");
                    drawCard(playerTurn ? "ai" : "player");
                    playerTurn = !playerTurn;
                    updateTurnIndicator();
                    setTimeout(aiTurn, 1000);
                } else {
                    playerTurn = false; // Corrected: switch to AI's turn
                    updateTurnIndicator();
                    setTimeout(aiTurn, 1000); // Start AI's turn after the player plays a card
                }
            }
        }

        function aiTurn() {
            if (playerHand.length === 0 || aiHand.length === 0) return;

            let lastCard = discardPile[discardPile.length - 1];
            let playableCards = [];

            for (let i = 0; i < aiHand.length; i++) {
                let card = aiHand[i];
                if (card.color === lastCard.color || card.number === lastCard.number || card.type === lastCard.type || card.type === 'wild' || card.type === 'wild+4') {
                    playableCards.push(card);
                }
            }

            if (playableCards.length > 0) {
                let cardToPlay = playableCards[0];
                if(cardToPlay.type === 'wild' || cardToPlay.type === 'wild+4'){
                    const colors = ['red', 'blue', 'green', 'yellow'];
                    const randomColor = colors[Math.floor(Math.random() * colors.length)]
                    cardToPlay.color = randomColor;
                }
                playSound('action-sound');
                discardPile.push(cardToPlay);
                aiHand.splice(aiHand.indexOf(cardToPlay), 1);
                updateHand("ai");
                updateDiscardPile();
                checkWin();
                if (playerHand.length > 0) {
                    playerTurn = true;
                    updateTurnIndicator();
                }
                return;
            }

            drawCard("ai");
            if (playerHand.length > 0) {
                playerTurn = true;
                updateTurnIndicator();
            }
        }

        function updateTurnIndicator() {
            const turnIndicator = document.getElementById("turn-indicator");
            turnIndicator.textContent = playerTurn ? "Your Turn" : "AI's Turn";
        }

        function checkWin() {
            let winner = null;
            if (playerHand.length === 0) {
                winner = "player";
            } else if (aiHand.length === 0) {
                winner = "ai";
            }

            if (winner) {
                document.getElementById("winner-message").textContent = "";
                let modal = document.getElementById("winner-modal");
                let modalTitle = document.getElementById("modal-title");
                let modalText = document.getElementById("modal-text");
                if (winner === "player") {
                    modalTitle.textContent = "You Win!";
                    modalText.textContent = "Congratulations!";
                } else {
                    modalTitle.textContent = "AI Wins!";
                    modalText.textContent = "Better luck next time!";
                }
                modal.style.display = "block";
                gameStarted = false;
            }
        }

        function resetGame() {
            playerHand = [];
            aiHand = [];
            discardPile = [];
            deck.length = 0; // Clear the deck
            deck.push(
                { color: 'red', number: 0, image: 'images/red_0.png' }, { color: 'red', number: 1, image: 'images/red_1.png' }, { color: 'red', number: 2, image: 'images/red_2.png' }, { color: 'red', number: 3, image: 'images/red_3.png' }, { color: 'red', number: 4, image: 'images/red_4.png' }, { color: 'red', number: 5, image: 'images/red_5.png' }, { color: 'red', number: 6, image: 'images/red_6.png' }, { color: 'red', number: 7, image: 'images/red_7.png' }, { color: 'red', number: 8, image: 'images/red_8.png' }, { color: 'red', number: 9, image: 'images/red_9.png' },
                { color: 'blue', number: 0, image: 'images/blue_0.png' }, { color: 'blue', number: 1, image: 'images/blue_1.png' }, { color: 'blue', number: 2, image: 'images/blue_2.png' }, { color: 'blue', number: 3, image: 'images/blue_3.png' }, { color: 'blue', number: 4, image: 'images/blue_4.png' }, { color: 'blue', number: 5, image: 'images/blue_5.png' }, { color: 'blue', number: 6, image: 'images/blue_6.png' }, { color: 'blue', number: 7, image: 'images/blue_7.png' }, { color: 'blue', number: 8, image: 'images/blue_8.png' }, { color: 'blue', number: 9, image: 'images/blue_9.png' },
                { color: 'green', number: 0, image: 'images/green_0.png' }, { color: 'green', number: 1, image: 'images/green_1.png' }, { color: 'green', number: 2, image: 'images/green_2.png' }, { color: 'green', number: 3, image: 'images/green_3.png' }, { color: 'green', number: 4, image: 'images/green_4.png' }, { color: 'green', number: 5, image: 'images/green_5.png' }, { color: 'green', number: 6, image: 'images/green_6.png' }, { color: 'green', number: 7, image: 'images/green_7.png' }, { color: 'green', number: 8, image: 'images/green_8.png' }, { color: 'green', number: 9, image: 'images/green_9.png' },
                { color: 'yellow', number: 0, image: 'images/yellow_0.png' }, { color: 'yellow', number: 1, image: 'images/yellow_1.png' }, { color: 'yellow', number: 2, image: 'images/yellow_2.png' }, { color: 'yellow', number: 3, image: 'images/yellow_3.png' }, { color: 'yellow', number: 4, image: 'images/yellow_4.png' }, { color: 'yellow', number: 5, image: 'images/yellow_5.png' }, { color: 'yellow', number: 6, image: 'images/yellow_6.png' }, { color: 'yellow', number: 7, image: 'images/yellow_7.png' }, { color: 'yellow', number: 8, image: 'images/yellow_8.png' }, { color: 'yellow', number: 9, image: 'images/yellow_9.png' },
                { color: 'red', type: 'reverse', image: 'images/red_reverse.png' }, { color: 'red', type: 'reverse', image: 'images/red_reverse.png' }, { color: 'red', type: 'block', image: 'images/red_block.png' }, { color: 'red', type: 'block', image: 'images/red_block.png' }, { color: 'red', type: '+2', image: 'images/red_plus2.png' }, { color: 'red', type: '+2', image: 'images/red_plus2.png' },
                { color: 'blue', type: 'reverse', image: 'images/blue_reverse.png' }, { color: 'blue', type: 'reverse', image: 'images/blue_reverse.png' }, { color: 'blue', type: 'block', image: 'images/blue_block.png' }, { color: 'blue', type: 'block', image: 'images/blue_block.png' }, { color: 'blue', type: '+2', image: 'images/blue_plus2.png' }, { color: 'blue', type: '+2', image: 'images/blue_plus2.png' },
                { color: 'green', type: 'reverse', image: 'images/green_reverse.png' }, { color: 'green', type: 'reverse', image: 'images/green_reverse.png' }, { color: 'green', type: 'block', image: 'images/green_block.png' }, { color: 'green', type: 'block', image: 'images/green_block.png' }, { color: 'green', type: '+2', image: 'images/green_plus2.png' }, { color: 'green', type: '+2', image: 'images/green_plus2.png' },
                { color: 'yellow', type: 'reverse', image: 'images/yellow_reverse.png' }, { color: 'yellow', type: 'reverse', image: 'images/yellow_reverse.png' }, { color: 'yellow', type: 'block', image: 'images/yellow_block.png' }, { color: 'yellow', type: 'block', image: 'images/yellow_block.png' }, { color: 'yellow', type: '+2', image: 'images/yellow_plus2.png' }, { color: 'yellow', type: '+2', image: 'images/yellow_plus2.png' },
                { type: 'wild', image: 'images/wild.png' }, { type: 'wild', image: 'images/wild.png' }, { type: 'wild', image: 'images/wild.png' }, { type: 'wild', image: 'images/wild.png' },
                { type: 'wild+4', image: 'images/wild_plus4.png' }, { type: 'wild+4', image: 'images/wild_plus4.png' }, { type: 'wild+4', image: 'images/wild_plus4.png' }, { type: 'wild+4', image: 'images/wild_plus4.png' }
            );
            // Shuffle the deck
            for (let i = deck.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [deck[i], deck[j]] = [deck[j], deck[i]];
            }

            // Make +2 and +4 functional
            function handleSpecialCards(card) {
                if (card.type === '+2') {
                    const target = playerTurn ? "ai" : "player";
                    drawCard(target);
                    drawCard(target);
                } else if (card.type === 'wild+4') {
                    const target = playerTurn ? "ai" : "player";
                    drawCard(target);
                    drawCard(target);
                    drawCard(target);
                    drawCard(target);
                }
            }

            // Limit the deck to 48 cards after dealing initial hands
            deck.splice(0, initialHandSize * 2);
            for (let i = deck.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [deck[i], deck[j]] = [deck[j], deck[i]];
            }
            // Reset the theme card
            const themeCard = deck[Math.floor(Math.random() * deck.length)];
            discardPile.push(themeCard);
            updateDiscardPile();
            if (themeCard.type === 'reverse' || themeCard.type === 'block' || themeCard.type === '+2' || themeCard.type === '+4') {
                playerTurn = true; // Ensure it's still the player's turn for special cards
                updateTurnIndicator();
            }
            gameStarted = false;
            playerTurn = true;
            document.getElementById("winner-modal").style.display = "none";
            startGame();
        }

        // Event listener for the View Game Mechanics button
        document.getElementById('view-mechanics').addEventListener('click', () => {
            document.getElementById('mechanics-modal').style.display = 'block';
        });

        // Event listener for closing the popup
        document.querySelector('#mechanics-modal .close-button').addEventListener('click', () => {
            document.getElementById('mechanics-modal').style.display = 'none';
        });

        // Close the popup if the user clicks outside of it
        window.addEventListener('click', (event) => {
            const modal = document.getElementById('mechanics-modal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    </script>
</body>
</html>
